{"ts":1374800452660,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ejs = (function(){\n\n// CommonJS require()\n\nfunction require(p){\n    if ('fs' == p) return {};\n    var path = require.resolve(p)\n      , mod = require.modules[path];\n    if (!mod) throw new Error('failed to require \"' + p + '\"');\n    if (!mod.exports) {\n      mod.exports = {};\n      mod.call(mod.exports, mod, mod.exports, require.relative(path));\n    }\n    return mod.exports;\n  }\n\nrequire.modules = {};\n\nrequire.resolve = function (path){\n    var orig = path\n      , reg = path + '.js'\n      , index = path + '/index.js';\n    return require.modules[reg] && reg\n      || require.modules[index] && index\n      || orig;\n  };\n\nrequire.register = function (path, fn){\n    require.modules[path] = fn;\n  };\n\nrequire.relative = function (parent) {\n    return function(p){\n      if ('.' != p.substr(0, 1)) return require(p);\n      \n      var path = parent.split('/')\n        , segs = p.split('/');\n      path.pop();\n      \n      for (var i = 0; i < segs.length; i++) {\n        var seg = segs[i];\n        if ('..' == seg) path.pop();\n        else if ('.' != seg) path.push(seg);\n      }\n\n      return require(path.join('/'));\n    };\n  };\n\n\nrequire.register(\"ejs.js\", function(module, exports, require){\n\n/*!\n * EJS\n * Copyright(c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils')\n  , fs = require('fs');\n\n/**\n * Library version.\n */\n\nexports.version = '0.7.2';\n\n/**\n * Filters.\n * \n * @type Object\n */\n\nvar filters = exports.filters = require('./filters');\n\n/**\n * Intermediate js cache.\n * \n * @type Object\n */\n\nvar cache = {};\n\n/**\n * Clear intermediate js cache.\n *\n * @api public\n */\n\nexports.clearCache = function(){\n  cache = {};\n};\n\n/**\n * Translate filtered code into function calls.\n *\n * @param {String} js\n * @return {String}\n * @api private\n */\n\nfunction filtered(js) {\n  return js.substr(1).split('|').reduce(function(js, filter){\n    var parts = filter.split(':')\n      , name = parts.shift()\n      , args = parts.shift() || '';\n    if (args) args = ', ' + args;\n    return 'filters.' + name + '(' + js + args + ')';\n  });\n};\n\n/**\n * Re-throw the given `err` in context to the\n * `str` of ejs, `filename`, and `lineno`.\n *\n * @param {Error} err\n * @param {String} str\n * @param {String} filename\n * @param {String} lineno\n * @api private\n */\n\nfunction rethrow(err, str, filename, lineno){\n  var lines = str.split('\\n')\n    , start = Math.max(lineno - 3, 0)\n    , end = Math.min(lines.length, lineno + 3);\n\n  // Error context\n  var context = lines.slice(start, end).map(function(line, i){\n    var curr = i + start + 1;\n    return (curr == lineno ? ' >> ' : '    ')\n      + curr\n      + '| '\n      + line;\n  }).join('\\n');\n\n  // Alter exception message\n  err.path = filename;\n  err.message = (filename || 'ejs') + ':' \n    + lineno + '\\n' \n    + context + '\\n\\n' \n    + err.message;\n  \n  throw err;\n}\n\n/**\n * Parse the given `str` of ejs, returning the function body.\n *\n * @param {String} str\n * @return {String}\n * @api public\n */\n\nvar parse = exports.parse = function(str, options){\n  var options = options || {}\n    , open = options.open || exports.open || '<%'\n    , close = options.close || exports.close || '%>';\n\n  var buf = [\n      \"var buf = [];\"\n    , \"\\nwith (locals) {\"\n    , \"\\n  buf.push('\"\n  ];\n  \n  var lineno = 1;\n\n  var consumeEOL = false;\n  for (var i = 0, len = str.length; i < len; ++i) {\n    if (str.slice(i, open.length + i) == open) {\n      i += open.length\n  \n      var prefix, postfix, line = '__stack.lineno=' + lineno;\n      switch (str.substr(i, 1)) {\n        case '=':\n          prefix = \"', escape((\" + line + ', ';\n          postfix = \")), '\";\n          ++i;\n          break;\n        case '-':\n          prefix = \"', (\" + line + ', ';\n          postfix = \"), '\";\n          ++i;\n          break;\n        default:\n          prefix = \"');\" + line + ';';\n          postfix = \"; buf.push('\";\n      }\n\n      var end = str.indexOf(close, i)\n        , js = str.substring(i, end)\n        , start = i\n        , n = 0;\n        \n      if ('-' == js[js.length-1]){\n        js = js.substring(0, js.length - 2);\n        consumeEOL = true;\n      }\n        \n      while (~(n = js.indexOf(\"\\n\", n))) n++, lineno++;\n      if (js.substr(0, 1) == ':') js = filtered(js);\n      buf.push(prefix, js, postfix);\n      i += end - start + close.length - 1;\n\n    } else if (str.substr(i, 1) == \"\\\\\") {\n      buf.push(\"\\\\\\\\\");\n    } else if (str.substr(i, 1) == \"'\") {\n      buf.push(\"\\\\'\");\n    } else if (str.substr(i, 1) == \"\\r\") {\n      buf.push(\" \");\n    } else if (str.substr(i, 1) == \"\\n\") {\n      if (consumeEOL) {\n        consumeEOL = false;\n      } else {\n        buf.push(\"\\\\n\");\n        lineno++;\n      }\n    } else {\n      buf.push(str.substr(i, 1));\n    }\n  }\n\n  buf.push(\"');\\n}\\nreturn buf.join('');\");\n  return buf.join('');\n};\n\n/**\n * Compile the given `str` of ejs into a `Function`.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nvar compile = exports.compile = function(str, options){\n  options = options || {};\n  \n  var input = JSON.stringify(str)\n    , filename = options.filename\n        ? JSON.stringify(options.filename)\n        : 'undefined';\n  \n  // Adds the fancy stack trace meta info\n  str = [\n    'var __stack = { lineno: 1, input: ' + input + ', filename: ' + filename + ' };',\n    rethrow.toString(),\n    'try {',\n    exports.parse(str, options),\n    '} catch (err) {',\n    '  rethrow(err, __stack.input, __stack.filename, __stack.lineno);',\n    '}'\n  ].join(\"\\n\");\n  \n  if (options.debug) console.log(str);\n  var fn = new Function('locals, filters, escape', str);\n  return function(locals){\n    return fn.call(this, locals, filters, utils.escape);\n  }\n};\n\n/**\n * Render the given `str` of ejs.\n *\n * Options:\n *\n *   - `locals`          Local variables object\n *   - `cache`           Compiled functions are cached, requires `filename`\n *   - `filename`        Used by `cache` to key caches\n *   - `scope`           Function execution context\n *   - `debug`           Output generated function body\n *   - `open`            Open tag, defaulting to \"<%\"\n *   - `close`           Closing tag, defaulting to \"%>\"\n *\n * @param {String} str\n * @param {Object} options\n * @return {String}\n * @api public\n */\n\nexports.render = function(str, options){\n  var fn\n    , options = options || {};\n\n  if (options.cache) {\n    if (options.filename) {\n      fn = cache[options.filename] || (cache[options.filename] = compile(str, options));\n    } else {\n      throw new Error('\"cache\" option requires \"filename\".');\n    }\n  } else {\n    fn = compile(str, options);\n  }\n\n  options.__proto__ = options.locals;\n  return fn.call(options.scope, options);\n};\n\n/**\n * Render an EJS file at the given `path` and callback `fn(err, str)`.\n *\n * @param {String} path\n * @param {Object|Function} options or callback\n * @param {Function} fn\n * @api public\n */\n\nexports.renderFile = function(path, options, fn){\n  var key = path + ':string';\n\n  if ('function' == typeof options) {\n    fn = options, options = {};\n  }\n\n  options.filename = path;\n\n  try {\n    var str = options.cache\n      ? cache[key] || (cache[key] = fs.readFileSync(path, 'utf8'))\n      : fs.readFileSync(path, 'utf8');\n\n    fn(null, exports.render(str, options));\n  } catch (err) {\n    fn(err);\n  }\n};\n\n// express support\n\nexports.__express = exports.renderFile;\n\n/**\n * Expose to require().\n */\n\nif (require.extensions) {\n  require.extensions['.ejs'] = function(module, filename) {\n    source = require('fs').readFileSync(filename, 'utf-8');\n    module._compile(compile(source, {}), filename);\n  };\n} else if (require.registerExtension) {\n  require.registerExtension('.ejs', function(src) {\n    return compile(src, {});\n  });\n}\n\n}); // module: ejs.js\n\nrequire.register(\"filters.js\", function(module, exports, require){\n\n/*!\n * EJS - Filters\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * First element of the target `obj`.\n */\n\nexports.first = function(obj) {\n  return obj[0];\n};\n\n/**\n * Last element of the target `obj`.\n */\n\nexports.last = function(obj) {\n  return obj[obj.length - 1];\n};\n\n/**\n * Capitalize the first letter of the target `str`.\n */\n\nexports.capitalize = function(str){\n  str = String(str);\n  return str[0].toUpperCase() + str.substr(1, str.length);\n};\n\n/**\n * Downcase the target `str`.\n */\n\nexports.downcase = function(str){\n  return String(str).toLowerCase();\n};\n\n/**\n * Uppercase the target `str`.\n */\n\nexports.upcase = function(str){\n  return String(str).toUpperCase();\n};\n\n/**\n * Sort the target `obj`.\n */\n\nexports.sort = function(obj){\n  return Object.create(obj).sort();\n};\n\n/**\n * Sort the target `obj` by the given `prop` ascending.\n */\n\nexports.sort_by = function(obj, prop){\n  return Object.create(obj).sort(function(a, b){\n    a = a[prop], b = b[prop];\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n};\n\n/**\n * Size or length of the target `obj`.\n */\n\nexports.size = exports.length = function(obj) {\n  return obj.length;\n};\n\n/**\n * Add `a` and `b`.\n */\n\nexports.plus = function(a, b){\n  return Number(a) + Number(b);\n};\n\n/**\n * Subtract `b` from `a`.\n */\n\nexports.minus = function(a, b){\n  return Number(a) - Number(b);\n};\n\n/**\n * Multiply `a` by `b`.\n */\n\nexports.times = function(a, b){\n  return Number(a) * Number(b);\n};\n\n/**\n * Divide `a` by `b`.\n */\n\nexports.divided_by = function(a, b){\n  return Number(a) / Number(b);\n};\n\n/**\n * Join `obj` with the given `str`.\n */\n\nexports.join = function(obj, str){\n  return obj.join(str || ', ');\n};\n\n/**\n * Truncate `str` to `len`.\n */\n\nexports.truncate = function(str, len){\n  str = String(str);\n  return str.substr(0, len);\n};\n\n/**\n * Truncate `str` to `n` words.\n */\n\nexports.truncate_words = function(str, n){\n  var str = String(str)\n    , words = str.split(/ +/);\n  return words.slice(0, n).join(' ');\n};\n\n/**\n * Replace `pattern` with `substitution` in `str`.\n */\n\nexports.replace = function(str, pattern, substitution){\n  return String(str).replace(pattern, substitution || '');\n};\n\n/**\n * Prepend `val` to `obj`.\n */\n\nexports.prepend = function(obj, val){\n  return Array.isArray(obj)\n    ? [val].concat(obj)\n    : val + obj;\n};\n\n/**\n * Append `val` to `obj`.\n */\n\nexports.append = function(obj, val){\n  return Array.isArray(obj)\n    ? obj.concat(val)\n    : obj + val;\n};\n\n/**\n * Map the given `prop`.\n */\n\nexports.map = function(arr, prop){\n  return arr.map(function(obj){\n    return obj[prop];\n  });\n};\n\n/**\n * Reverse the given `obj`.\n */\n\nexports.reverse = function(obj){\n  return Array.isArray(obj)\n    ? obj.reverse()\n    : String(obj).split('').reverse().join('');\n};\n\n/**\n * Get `prop` of the given `obj`.\n */\n\nexports.get = function(obj, prop){\n  return obj[prop];\n};\n\n/**\n * Packs the given `obj` into json string\n */\nexports.json = function(obj){\n  return JSON.stringify(obj);\n};\n}); // module: filters.js\n\nrequire.register(\"utils.js\", function(module, exports, require){\n\n/*!\n * EJS\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Escape the given string of `html`.\n *\n * @param {String} html\n * @return {String}\n * @api private\n */\n\nexports.escape = function(html){\n  return String(html)\n    .replace(/&(?!\\w+;)/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;');\n};\n \n}); // module: utils.js\n\n return require(\"ejs\");\n})();"]],"start1":0,"start2":0,"length1":0,"length2":11372}]],"length":11372}
